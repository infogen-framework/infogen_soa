// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

package com.infogen.infogen_demo.protoc;

/**
 * Protobuf service {@code MessageService}
 */
public abstract class MessageService implements com.google.protobuf.Service {
	protected MessageService() {
	}

	public interface Interface {
		/**
		 * <code>rpc get(.HttpRequest) returns (.HttpResponse);</code>
		 */
		public abstract void get(com.google.protobuf.RpcController controller, com.infogen.infogen_demo.protoc.HttpRequest request, com.google.protobuf.RpcCallback<com.infogen.infogen_demo.protoc.HttpResponse> done);

	}

	public static com.google.protobuf.Service newReflectiveService(final Interface impl) {
		return new MessageService() {
			@java.lang.Override
			public void get(com.google.protobuf.RpcController controller, com.infogen.infogen_demo.protoc.HttpRequest request, com.google.protobuf.RpcCallback<com.infogen.infogen_demo.protoc.HttpResponse> done) {
				impl.get(controller, request, done);
			}

		};
	}

	public static com.google.protobuf.BlockingService newReflectiveBlockingService(final BlockingInterface impl) {
		return new com.google.protobuf.BlockingService() {
			public final com.google.protobuf.Descriptors.ServiceDescriptor getDescriptorForType() {
				return getDescriptor();
			}

			public final com.google.protobuf.Message callBlockingMethod(com.google.protobuf.Descriptors.MethodDescriptor method, com.google.protobuf.RpcController controller, com.google.protobuf.Message request) throws com.google.protobuf.ServiceException {
				if (method.getService() != getDescriptor()) {
					throw new java.lang.IllegalArgumentException("Service.callBlockingMethod() given method descriptor for " + "wrong service type.");
				}
				switch (method.getIndex()) {
				case 0:
					return impl.get(controller, (com.infogen.infogen_demo.protoc.HttpRequest) request);
				default:
					throw new java.lang.AssertionError("Can't get here.");
				}
			}

			public final com.google.protobuf.Message getRequestPrototype(com.google.protobuf.Descriptors.MethodDescriptor method) {
				if (method.getService() != getDescriptor()) {
					throw new java.lang.IllegalArgumentException("Service.getRequestPrototype() given method " + "descriptor for wrong service type.");
				}
				switch (method.getIndex()) {
				case 0:
					return com.infogen.infogen_demo.protoc.HttpRequest.getDefaultInstance();
				default:
					throw new java.lang.AssertionError("Can't get here.");
				}
			}

			public final com.google.protobuf.Message getResponsePrototype(com.google.protobuf.Descriptors.MethodDescriptor method) {
				if (method.getService() != getDescriptor()) {
					throw new java.lang.IllegalArgumentException("Service.getResponsePrototype() given method " + "descriptor for wrong service type.");
				}
				switch (method.getIndex()) {
				case 0:
					return com.infogen.infogen_demo.protoc.HttpResponse.getDefaultInstance();
				default:
					throw new java.lang.AssertionError("Can't get here.");
				}
			}

		};
	}

	/**
	 * <code>rpc get(.HttpRequest) returns (.HttpResponse);</code>
	 */
	public abstract void get(com.google.protobuf.RpcController controller, com.infogen.infogen_demo.protoc.HttpRequest request, com.google.protobuf.RpcCallback<com.infogen.infogen_demo.protoc.HttpResponse> done);

	public static final com.google.protobuf.Descriptors.ServiceDescriptor getDescriptor() {
		return com.infogen.infogen_demo.protoc.Message.getDescriptor().getServices().get(0);
	}

	public final com.google.protobuf.Descriptors.ServiceDescriptor getDescriptorForType() {
		return getDescriptor();
	}

	public final void callMethod(com.google.protobuf.Descriptors.MethodDescriptor method, com.google.protobuf.RpcController controller, com.google.protobuf.Message request, com.google.protobuf.RpcCallback<com.google.protobuf.Message> done) {
		if (method.getService() != getDescriptor()) {
			throw new java.lang.IllegalArgumentException("Service.callMethod() given method descriptor for wrong " + "service type.");
		}
		switch (method.getIndex()) {
		case 0:
			this.get(controller, (com.infogen.infogen_demo.protoc.HttpRequest) request, com.google.protobuf.RpcUtil.<com.infogen.infogen_demo.protoc.HttpResponse> specializeCallback(done));
			return;
		default:
			throw new java.lang.AssertionError("Can't get here.");
		}
	}

	public final com.google.protobuf.Message getRequestPrototype(com.google.protobuf.Descriptors.MethodDescriptor method) {
		if (method.getService() != getDescriptor()) {
			throw new java.lang.IllegalArgumentException("Service.getRequestPrototype() given method " + "descriptor for wrong service type.");
		}
		switch (method.getIndex()) {
		case 0:
			return com.infogen.infogen_demo.protoc.HttpRequest.getDefaultInstance();
		default:
			throw new java.lang.AssertionError("Can't get here.");
		}
	}

	public final com.google.protobuf.Message getResponsePrototype(com.google.protobuf.Descriptors.MethodDescriptor method) {
		if (method.getService() != getDescriptor()) {
			throw new java.lang.IllegalArgumentException("Service.getResponsePrototype() given method " + "descriptor for wrong service type.");
		}
		switch (method.getIndex()) {
		case 0:
			return com.infogen.infogen_demo.protoc.HttpResponse.getDefaultInstance();
		default:
			throw new java.lang.AssertionError("Can't get here.");
		}
	}

	public static Stub newStub(com.google.protobuf.RpcChannel channel) {
		return new Stub(channel);
	}

	public static final class Stub extends com.infogen.infogen_demo.protoc.MessageService implements Interface {
		private Stub(com.google.protobuf.RpcChannel channel) {
			this.channel = channel;
		}

		private final com.google.protobuf.RpcChannel channel;

		public com.google.protobuf.RpcChannel getChannel() {
			return channel;
		}

		public void get(com.google.protobuf.RpcController controller, com.infogen.infogen_demo.protoc.HttpRequest request, com.google.protobuf.RpcCallback<com.infogen.infogen_demo.protoc.HttpResponse> done) {
			channel.callMethod(getDescriptor().getMethods().get(0), controller, request, com.infogen.infogen_demo.protoc.HttpResponse.getDefaultInstance(), com.google.protobuf.RpcUtil.generalizeCallback(done, com.infogen.infogen_demo.protoc.HttpResponse.class, com.infogen.infogen_demo.protoc.HttpResponse.getDefaultInstance()));
		}
	}

	public static BlockingInterface newBlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
		return new BlockingStub(channel);
	}

	public interface BlockingInterface {
		public com.infogen.infogen_demo.protoc.HttpResponse get(com.google.protobuf.RpcController controller, com.infogen.infogen_demo.protoc.HttpRequest request) throws com.google.protobuf.ServiceException;
	}

	private static final class BlockingStub implements BlockingInterface {
		private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
			this.channel = channel;
		}

		private final com.google.protobuf.BlockingRpcChannel channel;

		public com.infogen.infogen_demo.protoc.HttpResponse get(com.google.protobuf.RpcController controller, com.infogen.infogen_demo.protoc.HttpRequest request) throws com.google.protobuf.ServiceException {
			return (com.infogen.infogen_demo.protoc.HttpResponse) channel.callBlockingMethod(getDescriptor().getMethods().get(0), controller, request, com.infogen.infogen_demo.protoc.HttpResponse.getDefaultInstance());
		}

	}

	// @@protoc_insertion_point(class_scope:MessageService)
}
